import { VerticalBox,HorizontalBox, Button, ListView } from "std-widgets.slint";

export struct BookInOrder {
    id: int,
    quantity: int,
    price: string,
}

export struct CustomerOrder {
    id: int,
    customer_id: int,
    items: [BookInOrder],
    original_price: string,
    total_price: string,
    order_date: string,
    payment_status: string,
    shipping_status: string,
}

component singleOrderView inherits Rectangle {
    in property <CustomerOrder> order;
    in property <length> item-width;
    callback delete-customer-order(string);
    callback send-goods(int);

    width: root.item-width;
    callback clicked <=> touch.clicked;

    states [
        pressed when touch.pressed: {
            state.opacity: 0.6;
        }
        hover when touch.has-hover: {
            state.opacity: 0.4;
        }
    ]

    VerticalLayout {
        alignment: LayoutAlignment.start;
        width: root.item-width;
        Rectangle {
            touch := TouchArea {
                width: 100%;
                height: 100%;
            }

            state := Rectangle {
                opacity: 0;
                background: Colors.gray;

                animate opacity { duration: 150ms; }
            }

            VerticalLayout {

                HorizontalBox {
                    alignment: LayoutAlignment.start;
                    VerticalBox {
                        alignment: LayoutAlignment.start;
                        Text {
                            text: "Order ID: " + root.order.id;
                        }

                        Text {
                            text: "Order Date: " + root.order.order_date;
                        }

                        Text {
                            text: "Customer id: " + root.order.customer_id;
                        }
                    }

                    VerticalBox {
                        alignment: LayoutAlignment.start;
                        Text {
                            text: "Total Price: " + root.order.total_price;
                        }

                        Text {
                            text: "Payment Status: " + root.order.payment_status;
                        }

                        Text {
                            text: "Shipping Status: " + root.order.shipping_status;
                        }
                    }
                }

                HorizontalBox {
                    alignment: LayoutAlignment.start;

                    Text {
                        text: "Original Price: " + root.order.original_price;
                    }
                }

                VerticalBox {
                    alignment: LayoutAlignment.start;
                    for item[index] in root.order.items: VerticalBox {
                        width: root.item-width;
                        Text {
                            text: "Book id: " + root.order.items[index].id;
                        }

                        Text {
                            text: "Book quantity: " + root.order.items[index].quantity;
                        }
                    }
                }
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.end;
            padding-top: 8px;
            padding-bottom: 8px;

            Button {
                text: "Delete Order";
                clicked => {
                    root.delete-customer-order(root.order.id);
                }
            }

            Button {
                text: "Send Goods";
                clicked => {
                    root.send-goods(root.order.id);
                }
            }
        }
    }
}

export component customerOrderView inherits Window {
    in property <length> item-width: 300px;
    in property <[CustomerOrder]> orders;
    in property <length> window-width: 800px;
    in property <length> window-height: 600px;
    callback delete-customer-order(string);
    callback send-goods(int);

    VerticalBox {
        alignment: LayoutAlignment.start;
        ListView {
            preferred-height: root.window-height;

            for order[index] in root.orders: singleOrderView {
                order: orders[index];
                item-width: root.item-width;
                delete-customer-order => {
                    root.delete-customer-order(order.id);
                }

                send-goods => {
                    root.send-goods(order.id);
                }
            }
        }
    }
}
