import { VerticalBox, SpinBox, Button, ListView, HorizontalBox } from "std-widgets.slint";
import { SelectorComboBox } from "util-widget.slint";
export struct BookInCart {
    id: int,
    isbn: string,
    title: string,
    shortage: int,
    supplier: int,
    supplier-index: int,
}

component BookInCartItem inherits Rectangle {   //显示在购买界面的记录
    in property <BookInCart> book;
    in property <length> image-width;
    in property <float> image-aspect-ratio;
    in property <length> item-width;

    in property <[string]> suppliers;
    in property <[int]> supplier-ids;

    width: root.item-width;

    callback clicked <=> touch.clicked;
    callback update-shortage-book(int, int);
    callback update-shortage-supplier(int, int, int);
    callback remove-shortage-book(int);
    callback get-supplier-list();
    states [
        pressed when touch.pressed: {
            state.opacity: 0.6;
        }
        hover when touch.has-hover: {
            state.opacity: 0.4;
        }
    ]

    VerticalLayout {
        alignment: LayoutAlignment.start;
        Rectangle {
            touch := TouchArea {
                width: 100%;
                height: 100%;
            }

            state := Rectangle {
                opacity: 0;
                background: Colors.gray;

                animate opacity { duration: 150ms; }
            }

            VerticalBox {

                HorizontalLayout {
                    alignment: LayoutAlignment.start;
                    Text {
                        text: "ISBN: " + root.book.isbn;
                    }
                }

                HorizontalLayout {
                    alignment: LayoutAlignment.start;
                    Text {
                        text: "Title: " + root.book.title;
                    }
                }
            }
        }

        HorizontalBox {
            alignment: LayoutAlignment.end;

            Text {
                text: "Supplier: " + root.book.supplier;
                vertical-alignment: TextVerticalAlignment.center;
            }

            supplier-selector := SelectorComboBox {
                items: root.suppliers;
                item-ids: root.supplier-ids;

                current-index: root.book.supplier-index;

                get-item-list => {
                    root.get-supplier-list();
                }
            }

            Button {
                text: "Edit";
                clicked => {
                    root.update-shortage-supplier(root.book.id, supplier-selector.current-index, root.supplier-ids[supplier-selector.current-index]);
                }
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.end;
            padding-top: 8px;
            padding-bottom: 8px;
            shortage := SpinBox {
                value: root.book.shortage;
                minimum: 0;
                maximum: 100;
                edited => {
                    root.update-shortage-book(root.book.id, shortage.value);
                }
            }

            remove-button := Button {
                text: "Remove";
                clicked => {
                    root.remove-shortage-book(root.book.id);
                }
            }
        }
    }
}

export component BookCartView inherits Window {
    in property <[BookInCart]> books;

    in property <length> image-width: 100px;
    in property <float> image-aspect-ratio: 1.5;
    in property <length> item-width: 300px;
    in property <length> window-width: 800px;
    in property <length> window-height: 600px;
    in property <[string]> suppliers;
    in property <[int]> supplier-ids;

    callback update-cart-book(int, int);
    callback remove-cart-book(int);
    callback update-cart-supplier(int, int, int);
    callback get-supplier-list();
    callback checkout();

    VerticalBox {
        alignment: LayoutAlignment.start;
        ListView {
            preferred-height: root.window-height;

            for book[index] in root.books: BookInCartItem {
                book: book;
                image-width: root.image-width;
                image-aspect-ratio: root.image-aspect-ratio;
                item-width: root.item-width;

                suppliers: root.suppliers;
                supplier-ids: root.supplier-ids;

                get-supplier-list => {
                    root.get-supplier-list();
                }

                update-shortage-book(id, shortage) => {
                    root.update-cart-book(id, shortage);
                }

                update-shortage-supplier(id, supplier-index, supplier) => {
                    root.update-cart-supplier(id, supplier-index, supplier);
                }

                remove-shortage-book(id) => {
                    root.remove-cart-book(id);
                }
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.end;
            padding-top: 8px;
            padding-bottom: 8px;
            checkout-button := Button {
                text: "Checkout";
                clicked => {
                    root.checkout();
                }
            }
        }
    }
}
