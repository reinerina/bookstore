import { VerticalBox, HorizontalBox, ListView, LineEdit, Button, ComboBox, SpinBox } from "std-widgets.slint";

export struct BookInSearch {
        id: int,
        isbn: string,
        title: string,
        authors: [string],
        publisher: string,
        price: string,
        keywords: [string],
        cover: image,
}

component BookSearchItem inherits Rectangle {
    in property <BookInSearch> book;
    in property <length> image-width;
    in property <float> image-aspect-ratio;
    in property <length> item-width;
    in property <bool> has-login;

    width: root.item-width;

    callback clicked <=> touch.clicked;
    callback add-to-cart(int, int);

    states [
        pressed when touch.pressed: {
            state.opacity: 0.6;
        }
        hover when touch.has-hover: {
            state.opacity: 0.4;
        }
    ]

    VerticalLayout {
        alignment: LayoutAlignment.start;
        width: root.item-width;
        Rectangle {
            touch := TouchArea {
                width: 100%;
                height: 100%;
            }

            HorizontalLayout {
                alignment: LayoutAlignment.start;
                Image {
                    width: root.image-width;
                    height: root.image-width / root.image-aspect-ratio;
                    source: root.book.cover;
                }

                Rectangle {
                    width: root.item-width - root.image-width;

                    state := Rectangle {
                        opacity: 0;
                        background: Colors.gray;

                        animate opacity { duration: 150ms; }
                    }

                    VerticalBox {
                        alignment: LayoutAlignment.start;
                        Text {
                            text: "ISBN: " + root.book.isbn;
                        }

                        Text {
                            text: "Title: " + root.book.title;
                        }

                        HorizontalLayout {
                            alignment: LayoutAlignment.start;
                            Text {
                                text: "Authors: ";
                            }

                            for author[index] in root.book.authors: Text {
                                text: index < root.book.authors.length - 1 ? author + ", " : author;
                                vertical-alignment: TextVerticalAlignment.center;
                            }
                        }

                        Text {
                            text: "Publisher: " + root.book.publisher;
                        }

                        Text {
                            text: "Price: " + root.book.price;
                        }

                        HorizontalLayout {
                            alignment: LayoutAlignment.start;
                            Text {
                                text: "Keywords: ";
                            }

                            for keyword[index] in root.book.keywords: Text {
                                text: index < root.book.keywords.length - 1 ? keyword + ", " : keyword;
                                vertical-alignment: TextVerticalAlignment.center;
                            }
                        }
                    }
                }
            }
        }

        if(root.has-login): HorizontalLayout {
            alignment: LayoutAlignment.end;
            padding-top: 8px;
            padding-bottom: 8px;
            quantity := SpinBox {
                minimum: 1;
                maximum: 100;
                value: 1;
            }

            add-button := Button {
                text: "Add to Cart";
                clicked => {
                    root.add-to-cart(root.book.id, quantity.value);
                }
            }
        }
    }
}

export component BookSearchView inherits Window {
    in property <[BookInSearch]> books;
    in property <bool> has-login;
    in property <length> image-width: 100px;
    in property <float> image-aspect-ratio: 1.5;
    in property <length> item-width: 300px;
    in property <length> window-width: 800px;
    in property <length> window-height: 600px;

    in-out property <int> search-mode: 0;
    in-out property <string> search-text;

    callback open-book-detail(int);
    callback get-search-book-list(string, int);
    callback add-to-cart(int, int);

    VerticalBox {
        alignment: LayoutAlignment.start;

        search-widget := HorizontalBox {
            alignment: LayoutAlignment.start;
            LineEdit {
                preferred-width: root.window-width;
                text <=> root.search-text;
                placeholder-text: "Search book by title, author, or keyword";
                font-size: 15px;
            }

            HorizontalLayout {
                Text {
                    text: "Sort by: ";
                    vertical-alignment: TextVerticalAlignment.center;
                }

                ComboBox {
                    current-index <=> root.search-mode;
                    width: 120px;
                    model: ["Title", "Author", "Keyword"];
                }
            }

            Button {
                text: "Search";
                clicked => {
                    root.get-search-book-list(root.search-text, root.search-mode);
                }
            }
        }

        ListView {
            preferred-height: root.window-height;
            for book in root.books: BookSearchItem {
                book: book;
                image-width: root.image-width;
                image-aspect-ratio: root.image-aspect-ratio;
                item-width: root.item-width;
                has-login: root.has-login;

                clicked => {
                    root.open-book-detail(book.id);
                }

                add-to-cart(id, quantity) => {
                    root.add-to-cart(id, quantity);
                }
            }
        }
    }
}
