import { VerticalBox, Button, ListView, HorizontalBox } from "std-widgets.slint";
import { Book } from "book-management.slint";

//这里的基本逻辑完成了，样式需要修改
export struct BookItem{
    book: Book,
    quantity: int,
}

export struct restockOrder {
    id: int,
    restocked_books: [BookItem] ,
    order_date: string,
}

component restockHistoryItem inherits Rectangle {
    in property <restockOrder> order;
    in property <length> item-width;

    callback view-order(int);
    callback delete-order(int);
    callback confirm-receipt(string);


    width: root.item-width;
    callback clicked <=> touch.clicked;

    states [
        pressed when touch.pressed: {
            state.opacity: 0.6;
        }
        hover when touch.has-hover: {
            state.opacity: 0.4;
        }
    ]

    VerticalLayout {
        alignment: LayoutAlignment.start;
        width: root.item-width;
        Rectangle {
            touch := TouchArea {
                width: 100%;
                height: 100%;
            }

            state := Rectangle {
                opacity: 0;
                background: Colors.gray;

                animate opacity { duration: 150ms; }
            }

            VerticalLayout {

                HorizontalLayout {
                    alignment: LayoutAlignment.start;
                    Text {
                        text: "Id" + root.order.id;
                    }

                    VerticalBox {
                        alignment: LayoutAlignment.start;
                        ListView {
                            for BookItem[index] in root.order.restocked-books: VerticalBox {
                                Text {
                                    text: "Title: " + root.order.restocked_books[index].book.title;
                                }

                                Text {
                                    text: "Quantity: " + root.order.restocked_books[index].quantity;
                                }
                            }
                        }
                    }

                    Text {
                        text: "Order date: " + root.order.order_date;
                    }
                }
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.end;
            padding-top: 8px;
            padding-bottom: 8px;
            Button {
                text: "View";
                clicked => {
                    root.view-order(root.order.id);
                }
            }

            Button {
                text: "Delete Or Cancel";
                clicked => {
                    root.delete-order(root.order.id);
                }
            }

            Button {
                text: "Confirm receipt";
                clicked => {
                    root.confirm-receipt(root.order.id);
                }
            }
        }
    }
}

export component restockHistory inherits Window {
    in property <length> item-width: 300px;
    in property <[restockOrder]> orders;
    in property <length> window-width: 800px;
    in property <length> window-height: 600px;

    callback view-order(int);
    callback delete-order(int);
    callback confirm-receipt(string);

    VerticalBox {
        alignment: LayoutAlignment.start;
        ListView {
            preferred-height: root.window-height;
            for restockOrder in root.orders: restockHistoryItem {
                order: restockOrder;
                item-width: root.item-width;
                view-order =>{
                    root.view-order(restockOrder.id);
                
                }
                delete-order => {
                    root.delete-order(restockOrder.id);
                }
                confirm-receipt => {
                    root.confirm-receipt(restockOrder.id);
                }
            }
        }
    }
}